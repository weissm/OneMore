<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="sponsorButton.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>